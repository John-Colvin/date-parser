[
	{
		"file": "src/dateparser.d",
		"name": "dateparser",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "parse",
						"line": 783,
						"type": "SysTime(Range timeString, Flag!\"ignoreTimezone\" ignoreTimezone = No.ignoreTimezone, const(TimeZone)[string] timezoneInfos = null, Flag!\"dayFirst\" dayFirst = No.dayFirst, Flag!\"yearFirst\" yearFirst = No.yearFirst, Flag!\"fuzzy\" fuzzy = No.fuzzy, SysTime defaultDate = SysTime(DateTime(1, 1, 1)))",
						"parameters": [
							{
								"name": "timeString",
								"type": "Range"
							},
							{
								"name": "ignoreTimezone",
								"type": "Flag!\"ignoreTimezone\"",
								"default": "No.ignoreTimezone"
							},
							{
								"name": "timezoneInfos",
								"type": "const(TimeZone)[string]",
								"default": "null"
							},
							{
								"name": "dayFirst",
								"type": "Flag!\"dayFirst\"",
								"default": "No.dayFirst"
							},
							{
								"name": "yearFirst",
								"type": "Flag!\"yearFirst\"",
								"default": "No.yearFirst"
							},
							{
								"name": "fuzzy",
								"type": "Flag!\"fuzzy\"",
								"default": "No.fuzzy"
							},
							{
								"name": "defaultDate",
								"type": "SysTime",
								"default": "SysTime(DateTime(1, 1, 1))"
							}
						],
						"endline": 802,
						"char": 9,
						"kind": "function"
					}
				],
				"name": "parse",
				"line": 783,
				"comment": "This function offers a generic date/time string Parser which is able to parse\nmost known formats to represent a date and/or time.\n\nThis function attempts to be forgiving with regards to unlikely input formats,\nreturning a `SysTime` object even for dates which are ambiguous. If an element\nof a date/time stamp is omitted, the following rules are applied:\n\n$(UL\n    $(LI If AM or PM is left unspecified, a 24-hour clock is assumed, however,\n    an hour on a 12-hour clock (0 <= hour <= 12) *must* be specified if\n    AM or PM is specified.)\n    $(LI If a time zone is omitted, a SysTime is given with the timezone of the\n    host machine.)\n)\n\nMissing information is allowed, and what ever is given is applied on top of\nthe `defaultDate` parameter, which defaults to the current time and timezone\nof the host. E.g. a string of `\"10:00 AM\"` with a `defaultDate` of\n`SysTime(Date(2016, 1, 1))` will yield `SysTime(DateTime(2016, 1, 1, 10, 0, 0))`.\n\nIf your date string uses timezone names in place of UTC offsets, then timezone\ninformation must be user provided, as there is no way to reliably get timezones\nfrom the OS by abbreviation. But, the timezone will be properly set if an offset\nis given. Timezone info and their abbreviations change constantly, so it's a\ngood idea to not rely on `timezoneInfos` too much.\n\nBy default, this function allocates memory on the GC. In order to reduce GC\nallocations, use a custom `Parser` instance with a different allocator.\n\nParams:\n    timeString = A string containing a date/time stamp.\n    ignoreTimezone = Set to false by default, time zones in parsed strings are ignored and a\n               SysTime with the local time zone is returned. If timezone information\n               is not important, setting this to true is slightly faster.\n    timezoneInfos = Time zone names / aliases which may be present in the\n              string. This argument maps time zone names (and optionally offsets\n              from those time zones) to time zones. This parameter is ignored if\n              ignoreTimezone is set.\n    dayFirst = Whether to interpret the first value in an ambiguous 3-integer date\n              (e.g. 01/05/09) as the day (`true`) or month (`false`). If\n              yearFirst is set to true, this distinguishes between YDM and\n              YMD.\n    yearFirst = Whether to interpret the first value in an ambiguous 3-integer date\n                (e.g. 01/05/09) as the year. If true, the first number is taken to\n                be the year, otherwise the last number is taken to be the year.\n    fuzzy = Whether to allow fuzzy parsing, allowing for string like \"Today is\n            January 1, 2047 at 8:21:00AM\".\n    defaultDate = The date to apply the given information on top of. Defaults to\n    January 1st, 1 AD\n\nReturns:\n    A SysTime object representing the parsed string\n\nThrows:\n    `ConvException` will be thrown for invalid string or unknown string format\n\nThrows:\n    `TimeException` if the date string is successfully parsed but the created\n    date would be invalid\n\nThrows:\n    `ConvOverflowException` if one of the numbers in the parsed date exceeds\n    `float.max`\nExample:\n\n---\nimmutable brazilTime = new SimpleTimeZone(dur!\"seconds\"(-10_800));\nconst(TimeZone)[string] timezones = [\"BRST\" : brazilTime];\n\nimmutable parsed = parse(\"Thu Sep 25 10:36:28 BRST 2003\", No.ignoreTimezone, timezones);\n// SysTime opEquals ignores timezones\nassert(parsed == SysTime(DateTime(2003, 9, 25, 10, 36, 28)));\nassert(parsed.timezone == brazilTime);\n\nassert(parse(\n    \"2003 10:36:28 BRST 25 Sep Thu\",\n    No.ignoreTimezone,\n    timezones\n) == SysTime(DateTime(2003, 9, 25, 10, 36, 28)));\nassert(parse(\"Thu Sep 25 10:36:28\") == SysTime(DateTime(1, 9, 25, 10, 36, 28)));\nassert(parse(\"20030925T104941\") == SysTime(DateTime(2003, 9, 25, 10, 49, 41)));\nassert(parse(\"2003-09-25T10:49:41\") == SysTime(DateTime(2003, 9, 25, 10, 49, 41)));\nassert(parse(\"10:36:28\") == SysTime(DateTime(1, 1, 1, 10, 36, 28)));\nassert(parse(\"09-25-2003\") == SysTime(DateTime(2003, 9, 25)));\n\n---\nExample:\nApply information on top of `defaultDate`\n---\nassert(\"10:36:28\".parse(No.ignoreTimezone, null, No.dayFirst, No.yearFirst,\n    No.fuzzy, SysTime(DateTime(2016, 3, 15)))\n== SysTime(DateTime(2016, 3, 15, 10, 36, 28)));\nassert(\"August 07\".parse(No.ignoreTimezone, null, No.dayFirst, No.yearFirst,\n    No.fuzzy, SysTime(DateTime(2016, 1, 1)))\n== SysTime(Date(2016, 8, 7)));\nassert(\"2000\".parse(No.ignoreTimezone, null, No.dayFirst, No.yearFirst,\n    No.fuzzy, SysTime(DateTime(2016, 3, 1)))\n== SysTime(Date(2000, 3, 1)));\n\n---\nExample:\nCustom allocators\n---\nimport std.experimental.allocator.mallocator;\n\nauto customParser = new Parser!Mallocator(new ParserInfo());\nassert(customParser.parse(\"2003-09-25T10:49:41\") ==\n    SysTime(DateTime(2003, 9, 25, 10, 49, 41)));\n\n---\nExample:\nExceptions\n---\nimport std.exception : assertThrown;\nimport std.conv : ConvException;\n\nassertThrown!ConvException(parse(\"\"));\nassertThrown!ConvException(parse(\"AM\"));\nassertThrown!ConvException(parse(\"The quick brown fox jumps over the lazy dog\"));\nassertThrown!TimeException(parse(\"Feb 30, 2007\"));\nassertThrown!TimeException(parse(\"Jan 20, 2015 PM\"));\nassertThrown!ConvException(parse(\"13:44 AM\"));\nassertThrown!ConvException(parse(\"January 25, 1921 23:13 PM\"));\n\n---\nExample:\nCustom parser info allows for international time representation\n---\nclass RusParserInfo : ParserInfo\n{\n    this()\n    {\n        super(false, false);\n        monthsAA = ParserInfo.convert([\n            [\"янв\", \"Январь\"],\n            [\"фев\", \"Февраль\"],\n            [\"мар\", \"Март\"],\n            [\"апр\", \"Апрель\"],\n            [\"май\", \"Май\"],\n            [\"июн\", \"Июнь\"],\n            [\"июл\", \"Июль\"],\n            [\"авг\", \"Август\"],\n            [\"сен\", \"Сентябрь\"],\n            [\"окт\", \"Октябрь\"],\n            [\"ноя\", \"Ноябрь\"],\n            [\"дек\", \"Декабрь\"]\n        ]);\n    }\n}\n\nauto rusParser = new Parser!GCAllocator(new RusParserInfo());\nimmutable parsedTime = rusParser.parse(\"10 Сентябрь 2015 10:20\");\nassert(parsedTime == SysTime(DateTime(2015, 9, 10, 10, 20)));\n\n---\n",
				"parameters": [
					{
						"name": "Range",
						"kind": "type"
					}
				],
				"constraint": "isForwardRange!Range && !isInfinite!Range && is(ElementEncodingType!Range : const(char))",
				"char": 9,
				"kind": "template"
			},
			{
				"name": "ParserInfo",
				"line": 1217,
				"comment": "Class which handles what inputs are accepted. Subclass this to customize\nthe language and acceptable values for each parameter.\n\nParams:\n    dayFirst = Whether to interpret the first value in an ambiguous 3-integer date\n        (e.g. 01/05/09) as the day (`true`) or month (`false`). If\n        `yearFirst` is set to `true`, this distinguishes between YDM\n        and YMD. Default is `false`.\n    yearFirst = Whether to interpret the first value in an ambiguous 3-integer date\n        (e.g. 01/05/09) as the year. If `true`, the first number is taken\n        to be the year, otherwise the last number is taken to be the year.\n        Default is `false`.\n",
				"members": [
					{
						"offset": 24,
						"name": "jumpAA",
						"line": 1231,
						"comment": " AAs used for matching strings to calendar numbers, e.g. Jan is 1\n",
						"deco": "HAyai",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 32,
						"name": "weekdaysAA",
						"line": 1233,
						"comment": "ditto\n",
						"deco": "HAyai",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 40,
						"name": "monthsAA",
						"line": 1235,
						"comment": "ditto\n",
						"deco": "HAyai",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 48,
						"name": "hmsAA",
						"line": 1237,
						"comment": "ditto\n",
						"deco": "HAyai",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 56,
						"name": "ampmAA",
						"line": 1239,
						"comment": "ditto\n",
						"deco": "HAyai",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 64,
						"name": "utczoneAA",
						"line": 1241,
						"comment": "ditto\n",
						"deco": "HAyai",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 72,
						"name": "pertainAA",
						"line": 1243,
						"comment": "ditto\n",
						"deco": "HAyai",
						"char": 17,
						"kind": "variable"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "convert",
								"line": 1259,
								"type": "int[string](Range list)",
								"parameters": [
									{
										"name": "list",
										"type": "Range"
									}
								],
								"endline": 1280,
								"char": 24,
								"kind": "function"
							}
						],
						"name": "convert",
						"line": 1259,
						"comment": " Take a range of character ranges or a range of ranges of character\n ranges and converts it to an associative array that the internal\n parser info methods can use.\n\n Use this method in order to override the default parser info field\n values. See the example on the $(REF parse).\n\n Params:\n     list = a range of character ranges\n\n Returns:\n     An associative array of `int`s accessed by strings\n",
						"parameters": [
							{
								"name": "Range",
								"kind": "type"
							}
						],
						"constraint": "isInputRange!Range && isSomeChar!(ElementEncodingType!(ElementEncodingType!Range)) || isSomeChar!(ElementEncodingType!(ElementEncodingType!(ElementEncodingType!Range)))",
						"char": 24,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 1283,
						"comment": "Ctor\n",
						"deco": "FNfbbZC10dateparser10ParserInfo",
						"parameters": [
							{
								"name": "dayFirst",
								"deco": "b",
								"default": "false"
							},
							{
								"name": "yearFirst",
								"deco": "b",
								"default": "false"
							}
						],
						"endline": 1298,
						"originalType": "@safe (bool dayFirst = false, bool yearFirst = false)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "convertYear",
						"line": 1311,
						"comment": " If the century isn't specified, e.g. `\"'07\"`, then assume that the year\n is in the current century and return it as such. Otherwise do nothing\n\n Params:\n     convertYear = year to be converted\n     centurySpecified = is the century given in the year\n\n Returns:\n     the converted year\n",
						"deco": "xFNaNbNiNfibZi",
						"parameters": [
							{
								"name": "convertYear",
								"deco": "i"
							},
							{
								"name": "centurySpecified",
								"deco": "b",
								"default": "false"
							}
						],
						"endline": 1328,
						"char": 15,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "validate",
						"line": 1333,
						"comment": " Takes and Result and converts it year and checks if the timezone is UTC\n",
						"deco": "xFNaNfKS10dateparser11ParseResultZv",
						"parameters": [
							{
								"name": "res",
								"storageClass": [
									"ref"
								],
								"deco": "S10dateparser11ParseResult"
							}
						],
						"endline": 1348,
						"char": 16,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "jump",
								"line": 1351,
								"type": "const bool(const S name)",
								"parameters": [
									{
										"name": "name",
										"type": "S",
										"storageClass": [
											"const"
										]
									}
								],
								"endline": 1354,
								"char": 16,
								"kind": "function",
								"storageClass": [
									"final"
								]
							}
						],
						"name": "jump",
						"line": 1351,
						"comment": "Tests for presence of `name` in each of the AAs\n",
						"parameters": [
							{
								"name": "S",
								"kind": "type"
							}
						],
						"constraint": "isSomeString!S",
						"char": 16,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "weekday",
								"line": 1357,
								"type": "const int(const S name)",
								"parameters": [
									{
										"name": "name",
										"type": "S",
										"storageClass": [
											"const"
										]
									}
								],
								"endline": 1363,
								"char": 15,
								"kind": "function",
								"storageClass": [
									"final"
								]
							}
						],
						"name": "weekday",
						"line": 1357,
						"comment": "ditto\n",
						"parameters": [
							{
								"name": "S",
								"kind": "type"
							}
						],
						"constraint": "isSomeString!S",
						"char": 15,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "month",
								"line": 1366,
								"type": "const int(const S name)",
								"parameters": [
									{
										"name": "name",
										"type": "S",
										"storageClass": [
											"const"
										]
									}
								],
								"endline": 1372,
								"char": 15,
								"kind": "function",
								"storageClass": [
									"final"
								]
							}
						],
						"name": "month",
						"line": 1366,
						"comment": "ditto\n",
						"parameters": [
							{
								"name": "S",
								"kind": "type"
							}
						],
						"constraint": "isSomeString!S",
						"char": 15,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "hms",
								"line": 1375,
								"type": "const int(const S name)",
								"parameters": [
									{
										"name": "name",
										"type": "S",
										"storageClass": [
											"const"
										]
									}
								],
								"endline": 1381,
								"char": 15,
								"kind": "function",
								"storageClass": [
									"final"
								]
							}
						],
						"name": "hms",
						"line": 1375,
						"comment": "ditto\n",
						"parameters": [
							{
								"name": "S",
								"kind": "type"
							}
						],
						"constraint": "isSomeString!S",
						"char": 15,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "ampm",
								"line": 1384,
								"type": "const int(const S name)",
								"parameters": [
									{
										"name": "name",
										"type": "S",
										"storageClass": [
											"const"
										]
									}
								],
								"endline": 1390,
								"char": 15,
								"kind": "function",
								"storageClass": [
									"final"
								]
							}
						],
						"name": "ampm",
						"line": 1384,
						"comment": "ditto\n",
						"parameters": [
							{
								"name": "S",
								"kind": "type"
							}
						],
						"constraint": "isSomeString!S",
						"char": 15,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "pertain",
								"line": 1393,
								"type": "const bool(const S name)",
								"parameters": [
									{
										"name": "name",
										"type": "S",
										"storageClass": [
											"const"
										]
									}
								],
								"endline": 1396,
								"char": 16,
								"kind": "function",
								"storageClass": [
									"final"
								]
							}
						],
						"name": "pertain",
						"line": 1393,
						"comment": "ditto\n",
						"parameters": [
							{
								"name": "S",
								"kind": "type"
							}
						],
						"constraint": "isSomeString!S",
						"char": 16,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "utczone",
								"line": 1399,
								"type": "const bool(const S name)",
								"parameters": [
									{
										"name": "name",
										"type": "S",
										"storageClass": [
											"const"
										]
									}
								],
								"endline": 1402,
								"char": 16,
								"kind": "function",
								"storageClass": [
									"final"
								]
							}
						],
						"name": "utczone",
						"line": 1399,
						"comment": "ditto\n",
						"parameters": [
							{
								"name": "S",
								"kind": "type"
							}
						],
						"constraint": "isSomeString!S",
						"char": 16,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "tzoffset",
								"line": 1405,
								"type": "const int(const S name)",
								"parameters": [
									{
										"name": "name",
										"type": "S",
										"storageClass": [
											"const"
										]
									}
								],
								"endline": 1408,
								"char": 15,
								"kind": "function",
								"storageClass": [
									"final"
								]
							}
						],
						"name": "tzoffset",
						"line": 1405,
						"comment": "ditto\n",
						"parameters": [
							{
								"name": "S",
								"kind": "type"
							}
						],
						"constraint": "isSomeString!S",
						"char": 15,
						"kind": "template"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"name": "Parser",
						"line": 1420,
						"members": [
							{
								"name": "info",
								"line": 1423,
								"type": "ParserInfo",
								"char": 30,
								"kind": "variable",
								"storageClass": [
									"const"
								]
							},
							{
								"name": "AllocatorState!Allocator",
								"line": 1424,
								"char": 5,
								"kind": "mixin"
							},
							{
								"endchar": 5,
								"name": "this",
								"line": 1428,
								"comment": "\n",
								"type": "(const ParserInfo parserInfo = null)",
								"parameters": [
									{
										"name": "parserInfo",
										"type": "ParserInfo",
										"storageClass": [
											"const"
										],
										"default": "null"
									}
								],
								"endline": 1438,
								"char": 5,
								"kind": "constructor"
							},
							{
								"members": [
									{
										"endchar": 5,
										"name": "parse",
										"line": 1445,
										"type": "SysTime(Range timeString, Flag!\"ignoreTimezone\" ignoreTimezone = No.ignoreTimezone, const(TimeZone)[string] timezoneInfos = null, Flag!\"dayFirst\" dayFirst = No.dayFirst, Flag!\"yearFirst\" yearFirst = No.yearFirst, Flag!\"fuzzy\" fuzzy = No.fuzzy, SysTime defaultDate = SysTime(Date(1, 1, 1)))",
										"parameters": [
											{
												"name": "timeString",
												"type": "Range"
											},
											{
												"name": "ignoreTimezone",
												"type": "Flag!\"ignoreTimezone\"",
												"default": "No.ignoreTimezone"
											},
											{
												"name": "timezoneInfos",
												"type": "const(TimeZone)[string]",
												"default": "null"
											},
											{
												"name": "dayFirst",
												"type": "Flag!\"dayFirst\"",
												"default": "No.dayFirst"
											},
											{
												"name": "yearFirst",
												"type": "Flag!\"yearFirst\"",
												"default": "No.yearFirst"
											},
											{
												"name": "fuzzy",
												"type": "Flag!\"fuzzy\"",
												"default": "No.fuzzy"
											},
											{
												"name": "defaultDate",
												"type": "SysTime",
												"default": "SysTime(Date(1, 1, 1))"
											}
										],
										"endline": 1532,
										"char": 13,
										"kind": "function"
									}
								],
								"name": "parse",
								"line": 1445,
								"comment": " This function has the same functionality as the free version of `parse`.\n The only difference is this will use your custom `ParserInfo` or allocator\n if provided.\n",
								"parameters": [
									{
										"name": "Range",
										"kind": "type"
									}
								],
								"constraint": "isForwardRange!Range && !isInfinite!Range && is(ElementEncodingType!Range : const(char))",
								"char": 13,
								"kind": "template"
							},
							{
								"endchar": 5,
								"name": "parseMS",
								"line": 1543,
								"comment": " Parse a I[.F] seconds value into (seconds, microseconds)\n\n Params:\n     value = value to parse\n Returns:\n     tuple of two ints\n",
								"type": "(string value)",
								"parameters": [
									{
										"name": "value",
										"type": "string"
									}
								],
								"endline": 1560,
								"char": 10,
								"kind": "function",
								"storageClass": [
									"auto"
								]
							},
							{
								"members": [
									{
										"endchar": 5,
										"name": "setAttribute",
										"line": 1562,
										"type": "void(ref P p, string name, auto ref T value)",
										"parameters": [
											{
												"name": "p",
												"type": "P",
												"storageClass": [
													"ref"
												]
											},
											{
												"name": "name",
												"type": "string"
											},
											{
												"name": "value",
												"type": "T",
												"storageClass": [
													"auto",
													"ref"
												]
											}
										],
										"endline": 1579,
										"char": 10,
										"kind": "function"
									}
								],
								"name": "setAttribute",
								"line": 1562,
								"parameters": [
									{
										"name": "P",
										"kind": "type"
									},
									{
										"name": "T",
										"kind": "type"
									}
								],
								"char": 10,
								"kind": "template"
							},
							{
								"members": [
									{
										"endchar": 5,
										"name": "parseImpl",
										"line": 1599,
										"type": "ParseResult(Range timeString, bool dayFirst = false, bool yearFirst = false, bool fuzzy = false)",
										"parameters": [
											{
												"name": "timeString",
												"type": "Range"
											},
											{
												"name": "dayFirst",
												"deco": "b",
												"default": "false"
											},
											{
												"name": "yearFirst",
												"deco": "b",
												"default": "false"
											},
											{
												"name": "fuzzy",
												"deco": "b",
												"default": "false"
											}
										],
										"endline": 2165,
										"char": 17,
										"kind": "function"
									}
								],
								"name": "parseImpl",
								"line": 1599,
								"comment": " Private method which performs the heavy lifting of parsing, called from\n `parse`.\n\n Params:\n     timeString = the string to parse.\n     dayFirst = Whether to interpret the first value in an ambiguous\n     3-integer date (e.g. 01/05/09) as the day (true) or month (false). If\n     yearFirst is set to true, this distinguishes between YDM\n     and YMD. If set to null, this value is retrieved from the\n     current :class:ParserInfo object (which itself defaults to\n     false).\n     yearFirst = Whether to interpret the first value in an ambiguous 3-integer date\n     (e.g. 01/05/09) as the year. If true, the first number is taken\n     to be the year, otherwise the last number is taken to be the year.\n     fuzzy = Whether to allow fuzzy parsing, allowing for string like \"Today is\n     January 1, 2047 at 8:21:00AM\".\n",
								"parameters": [
									{
										"name": "Range",
										"kind": "type"
									}
								],
								"constraint": "isForwardRange!Range && !isInfinite!Range && is(ElementEncodingType!Range : const(char))",
								"char": 17,
								"kind": "template"
							}
						],
						"char": 7,
						"kind": "class"
					}
				],
				"name": "Parser",
				"line": 1420,
				"comment": " Implements the parsing functionality for the parse function. If you are\n using a custom `ParserInfo` many times in the same program, you can avoid\n unnecessary allocations by using the `Parser.parse` function directly.\n\n Params:\n     Allocator = the allocator type to use\n     parserInfo = the parser info to reference when parsing\n",
				"parameters": [
					{
						"name": "Allocator",
						"kind": "type"
					}
				],
				"constraint": "hasMember!(Allocator, \"allocate\") && hasMember!(Allocator, \"deallocate\")",
				"char": 7,
				"kind": "template"
			}
		],
		"kind": "module"
	}
]